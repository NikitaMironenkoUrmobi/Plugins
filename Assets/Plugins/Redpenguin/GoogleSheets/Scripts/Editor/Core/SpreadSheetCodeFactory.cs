using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Redpenguin.GoogleSheets.Scripts.Runtime.Attributes;
using UnityEditor;
using UnityEngine;

namespace Redpenguin.GoogleSheets.Scripts.Editor.Core
{
  public class SpreadSheetCodeFactory
  {
    private const string ScriptName = "%CLASS_NAME%";
    private const string SerializeClass = "%SERIALIZE_CLASS%";
    private const string SheetRange = "%SHEET_RANGE%";
    private const string NameSpace = "%NAMESPACE%";
    private const string SoTemplate = "CodeTemplates/SpreadSheetScriptableObjectTemplate";
    private const string SpreadSheetAttributeLink
      = "<a href=\"Assets/Plugins/Redpenguin/GoogleSheets/Scripts/Runtime/Attributes/SpreadSheet.cs\" line=\"6\">SpreadSheet</a>";
    private const string ExampleAttributeUsageLink
      = "<a href=\"Assets/Plugins/Redpenguin/GoogleSheets/Scripts/Runtime/Examples/ExampleData.cs\" line=\"8\">Example</a>";

    private readonly string _savePath =
      $"{Application.dataPath}/Plugins/Redpenguin/GoogleSheets/Scripts/Runtime/AutoGenerated/SpreadSheetScriptableObjects";

    private readonly TextAsset _scriptTextAsset;
    private readonly List<Type> _listOfTypes = new List<Type>();

    public SpreadSheetCodeFactory(TextAsset scriptTextAsset)
    {
      _scriptTextAsset = Resources.Load<TextAsset>(SoTemplate);

      if (!Directory.Exists(_savePath))
      {
        Directory.CreateDirectory(_savePath);
      }
    }

    public bool CreateAdditionalScripts()
    {
      var count = 0;
      DeleteAllScripts(_savePath);
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        foreach (var type in assembly.GetTypes())
        {
          if (!(type.GetCustomAttribute(typeof(SpreadSheet)) is SpreadSheet sheet)) continue;
          var scriptName = $"{sheet.Name}SheetDatabase";
          var file = Replace(_scriptTextAsset.text, scriptName, type.Name, sheet.Range, type.Namespace);
          CreateScript(file, scriptName);
          count++;
        }
      }

      ScriptsCreatedLog(count);
      AssetDatabase.SaveAssets();
      AssetDatabase.Refresh();
      return count > 0;
    }

    private void ScriptsCreatedLog(int count)
    {
      Debug.Log(count > 0
        ? "Additional scripts was created! Waiting for reload assemblies..."
        : $"Didn't find classes with {SpreadSheetAttributeLink} attribute. ({ExampleAttributeUsageLink})");
    }

    private string Replace(string scriptText, string scriptName, string className, string sheetRange, string nameSpace)
    {
      var sb = new StringBuilder(scriptText);
      sb.Replace(ScriptName, scriptName);
      sb.Replace(SerializeClass, className);
      sb.Replace(SheetRange, sheetRange);
      sb.Replace(NameSpace, nameSpace);
      return sb.ToString();
    }

    private void CreateScript(string codeText, string scriptName)
    {
      var path = $"{_savePath}/{scriptName}.cs";
      File.WriteAllText(path, codeText);
    }

    private void DeleteAllScripts(string directoryPath)
    {
      var di = new DirectoryInfo(directoryPath);
      foreach (var file in di.EnumerateFiles())
      {
        //Debug.Log($"{file.Name} delete");
        file.Delete();
      }

      AssetDatabase.Refresh();
    }

    public List<Type> GetGeneratedScriptsTypes()
    {
      _listOfTypes.Clear();
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        assembly.GetTypes().Where(type =>
            (type.GetCustomAttribute(typeof(SheetRange)) is SheetRange))
          .ToList().ForEach(x => _listOfTypes.Add(x));
      }

      return _listOfTypes;
    }
  }
}